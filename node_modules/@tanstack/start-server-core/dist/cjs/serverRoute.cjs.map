{"version":3,"file":"serverRoute.cjs","sources":["../../src/serverRoute.ts"],"sourcesContent":["import { joinPaths, rootRouteId, trimPathLeft } from '@tanstack/router-core'\nimport type {\n  Assign,\n  Constrain,\n  Expand,\n  ResolveParams,\n  RouteConstraints,\n  TrimPathRight,\n} from '@tanstack/router-core'\nimport type {\n  AnyRequestMiddleware,\n  AssignAllServerContext,\n} from '@tanstack/start-client-core'\n\nexport function createServerFileRoute<\n  TFilePath extends keyof ServerFileRoutesByPath,\n  TParentRoute extends\n    AnyServerRouteWithTypes = ServerFileRoutesByPath[TFilePath]['parentRoute'],\n  TId extends RouteConstraints['TId'] = ServerFileRoutesByPath[TFilePath]['id'],\n  TPath extends\n    RouteConstraints['TPath'] = ServerFileRoutesByPath[TFilePath]['path'],\n  TFullPath extends\n    RouteConstraints['TFullPath'] = ServerFileRoutesByPath[TFilePath]['fullPath'],\n  TChildren = ServerFileRoutesByPath[TFilePath]['children'],\n>(_: TFilePath): ServerRoute<TParentRoute, TId, TPath, TFullPath, TChildren> {\n  return createServerRoute<TParentRoute, TId, TPath, TFullPath, TChildren>(\n    undefined,\n  )\n}\n\nexport interface ServerFileRoutesByPath {}\n\nexport interface ServerRouteOptions<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TMiddlewares,\n> {\n  id: TId\n  path: TPath\n  pathname: TFullPath\n  originalIndex: number\n  getParentRoute?: () => TParentRoute\n  middleware?: Constrain<TMiddlewares, ReadonlyArray<AnyRequestMiddleware>>\n  methods?: Record<\n    string,\n    | ServerRouteMethodHandlerFn<\n        TParentRoute,\n        TFullPath,\n        TMiddlewares,\n        any,\n        any\n      >\n    | {\n        _options: ServerRouteMethodBuilderOptions<\n          TParentRoute,\n          TFullPath,\n          TMiddlewares,\n          unknown,\n          unknown\n        >\n      }\n  >\n  caseSensitive?: boolean\n}\n\nexport type ServerRouteManifest = {\n  middleware: boolean\n  methods: Record<string, { middleware: boolean }>\n}\n\nexport function createServerRoute<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TChildren,\n>(\n  __?: never,\n  __opts?: Partial<\n    ServerRouteOptions<TParentRoute, TId, TPath, TFullPath, undefined>\n  >,\n): ServerRoute<TParentRoute, TId, TPath, TFullPath, TChildren> {\n  const options = __opts || {}\n\n  const route: ServerRoute<TParentRoute, TId, TPath, TFullPath, TChildren> = {\n    isRoot: false as any,\n    path: '' as TPath,\n    id: '' as TId,\n    fullPath: '' as TFullPath,\n    to: '' as TrimPathRight<TFullPath>,\n    options: options as ServerRouteOptions<\n      TParentRoute,\n      TId,\n      TPath,\n      TFullPath,\n      any\n    >,\n    parentRoute: undefined as unknown as TParentRoute,\n    _types: {} as ServerRouteTypes<\n      TParentRoute,\n      TId,\n      TPath,\n      TFullPath,\n      undefined,\n      undefined\n    >,\n    // children: undefined as TChildren,\n    middleware: (middlewares) =>\n      createServerRoute(undefined, {\n        ...options,\n        middleware: middlewares,\n      }) as never,\n    methods: (methodsOrGetMethods) => {\n      const methods = (() => {\n        if (typeof methodsOrGetMethods === 'function') {\n          return methodsOrGetMethods(createMethodBuilder())\n        }\n\n        return methodsOrGetMethods\n      })()\n\n      return createServerRoute(undefined, {\n        ...__opts,\n        methods: methods as never,\n      }) as never\n    },\n    update: (opts) =>\n      createServerRoute(undefined, {\n        ...options,\n        ...opts,\n      }),\n    init: (opts: { originalIndex: number }): void => {\n      options.originalIndex = opts.originalIndex\n\n      const isRoot = !options.path && !options.id\n\n      route.parentRoute = options.getParentRoute?.() as TParentRoute\n\n      if (isRoot) {\n        route.path = rootRouteId as TPath\n      } else if (!(route.parentRoute as any)) {\n        throw new Error(\n          `Child Route instances must pass a 'getParentRoute: () => ParentRoute' option that returns a ServerRoute instance.`,\n        )\n      }\n\n      let path: undefined | string = isRoot ? rootRouteId : options.path\n\n      // If the path is anything other than an index path, trim it up\n      if (path && path !== '/') {\n        path = trimPathLeft(path)\n      }\n\n      const customId = options.id || path\n\n      // Strip the parentId prefix from the first level of children\n      let id = isRoot\n        ? rootRouteId\n        : joinPaths([\n            route.parentRoute.id === rootRouteId ? '' : route.parentRoute.id,\n            customId,\n          ])\n\n      if (path === rootRouteId) {\n        path = '/'\n      }\n\n      if (id !== rootRouteId) {\n        id = joinPaths(['/', id])\n      }\n\n      const fullPath =\n        id === rootRouteId ? '/' : joinPaths([route.parentRoute.fullPath, path])\n\n      route.path = path as TPath\n      route.id = id as TId\n      route.fullPath = fullPath as TFullPath\n      route.to = fullPath as TrimPathRight<TFullPath>\n      route.isRoot = isRoot as any\n    },\n\n    _addFileChildren: (children) => {\n      if (Array.isArray(children)) {\n        route.children = children as TChildren\n      }\n\n      if (typeof children === 'object' && children !== null) {\n        route.children = Object.values(children) as TChildren\n      }\n\n      return route\n    },\n\n    _addFileTypes: <TFileTypes>() => route,\n  }\n\n  return route\n}\n\n// TODO this needs to be restricted to only allow middleware, no methods\n// TODO we also need to restrict pathless server routes to only allow middleware\nexport const createServerRootRoute = createServerRoute\n\nexport type ServerRouteAddFileChildrenFn<\n  in out TParentRoute extends AnyServerRouteWithTypes,\n  in out TId extends RouteConstraints['TId'],\n  in out TPath extends RouteConstraints['TPath'],\n  in out TFullPath extends RouteConstraints['TFullPath'],\n  in out TMiddlewares,\n  in out TMethods,\n  in out TChildren,\n> = (\n  children: TChildren,\n) => ServerRouteWithTypes<\n  TParentRoute,\n  TId,\n  TPath,\n  TFullPath,\n  TMiddlewares,\n  TMethods,\n  TChildren\n>\n\nconst createMethodBuilder = <\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n>(\n  __opts?: ServerRouteMethodBuilderOptions<\n    TParentRoute,\n    TFullPath,\n    TMiddlewares,\n    unknown,\n    unknown\n  >,\n): ServerRouteMethodBuilder<TParentRoute, TFullPath, TMiddlewares> => {\n  return {\n    _options: (__opts || {}) as never,\n    _types: {} as never,\n    middleware: (middlewares) =>\n      createMethodBuilder({\n        ...__opts,\n        middlewares,\n      }) as never,\n    handler: (handler) =>\n      createMethodBuilder({\n        ...__opts,\n        handler: handler as never,\n      }) as never,\n  }\n}\n\nexport interface ServerRouteMethodBuilderOptions<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n  TMethodMiddlewares,\n  TResponse,\n> {\n  handler?: ServerRouteMethodHandlerFn<\n    TParentRoute,\n    TFullPath,\n    TMiddlewares,\n    TMethodMiddlewares,\n    TResponse\n  >\n  middlewares?: Constrain<\n    TMethodMiddlewares,\n    ReadonlyArray<AnyRequestMiddleware>\n  >\n}\n\nexport type CreateServerFileRoute<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TChildren,\n> = () => ServerRoute<TParentRoute, TId, TPath, TFullPath, TChildren>\n\nexport type AnyServerRouteWithTypes = ServerRouteWithTypes<\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any\n>\n\nexport interface ServerRouteWithTypes<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TMiddlewares,\n  TMethods,\n  TChildren,\n> {\n  _types: ServerRouteTypes<\n    TParentRoute,\n    TId,\n    TPath,\n    TFullPath,\n    TMiddlewares,\n    TMethods\n  >\n  isRoot: TParentRoute extends AnyServerRouteWithTypes ? true : false\n  path: TPath\n  id: TId\n  fullPath: TFullPath\n  to: TrimPathRight<TFullPath>\n  parentRoute: TParentRoute\n  children?: TChildren\n  options: ServerRouteOptions<TParentRoute, TId, TPath, TFullPath, TMiddlewares>\n  update: (\n    opts: ServerRouteOptions<TParentRoute, TId, TPath, TFullPath, undefined>,\n  ) => ServerRoute<TParentRoute, TId, TPath, TFullPath, TChildren>\n  init: (opts: { originalIndex: number }) => void\n  _addFileChildren: ServerRouteAddFileChildrenFn<\n    TParentRoute,\n    TId,\n    TPath,\n    TFullPath,\n    TMiddlewares,\n    TMethods,\n    TChildren\n  >\n  _addFileTypes: () => ServerRouteWithTypes<\n    TParentRoute,\n    TId,\n    TPath,\n    TFullPath,\n    TMiddlewares,\n    TMethods,\n    TChildren\n  >\n}\n\nexport interface ServerRouteTypes<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TMiddlewares,\n  TMethods,\n> {\n  isRoot: TParentRoute extends AnyServerRouteWithTypes ? true : false\n  id: TId\n  path: TPath\n  fullPath: TFullPath\n  middlewares: TMiddlewares\n  methods: TMethods\n  parentRoute: TParentRoute\n  allContext: ResolveAllServerContext<TParentRoute, TMiddlewares>\n}\n\nexport type ResolveAllServerContext<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TMiddlewares,\n> = unknown extends TParentRoute\n  ? AssignAllServerContext<TMiddlewares>\n  : Assign<\n      TParentRoute['_types']['allContext'],\n      AssignAllServerContext<TMiddlewares>\n    >\n\nexport type AnyServerRoute = AnyServerRouteWithTypes\n\nexport interface ServerRoute<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TChildren,\n> extends ServerRouteWithTypes<\n      TParentRoute,\n      TId,\n      TPath,\n      TFullPath,\n      undefined,\n      undefined,\n      TChildren\n    >,\n    ServerRouteMiddleware<TParentRoute, TId, TPath, TFullPath, TChildren>,\n    ServerRouteMethods<\n      TParentRoute,\n      TId,\n      TPath,\n      TFullPath,\n      undefined,\n      TChildren\n    > {}\n\nexport interface ServerRouteMiddleware<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TChildren,\n> {\n  middleware: <const TNewMiddleware>(\n    middleware: Constrain<TNewMiddleware, ReadonlyArray<AnyRequestMiddleware>>,\n  ) => ServerRouteAfterMiddleware<\n    TParentRoute,\n    TId,\n    TPath,\n    TFullPath,\n    TNewMiddleware,\n    TChildren\n  >\n}\n\nexport interface ServerRouteAfterMiddleware<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TMiddlewares,\n  TChildren,\n> extends ServerRouteWithTypes<\n      TParentRoute,\n      TId,\n      TPath,\n      TFullPath,\n      TMiddlewares,\n      undefined,\n      TChildren\n    >,\n    ServerRouteMethods<\n      TParentRoute,\n      TId,\n      TPath,\n      TFullPath,\n      TMiddlewares,\n      TChildren\n    > {}\n\nexport interface ServerRouteMethods<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TMiddlewares,\n  TChildren,\n> {\n  methods: <const TMethods>(\n    methodsOrGetMethods: Constrain<\n      TMethods,\n      ServerRouteMethodsOptions<TParentRoute, TFullPath, TMiddlewares>\n    >,\n  ) => ServerRouteAfterMethods<\n    TParentRoute,\n    TId,\n    TPath,\n    TFullPath,\n    TMiddlewares,\n    TMethods,\n    TChildren\n  >\n}\n\nexport type ServerRouteMethodsOptions<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n> =\n  | ServerRouteMethodsRecord<TParentRoute, TFullPath, TMiddlewares>\n  | ((\n      api: ServerRouteMethodBuilder<TParentRoute, TFullPath, TMiddlewares>,\n    ) => ServerRouteMethodsRecord<TParentRoute, TFullPath, TMiddlewares>)\n\nexport interface ServerRouteMethodsRecord<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n> {\n  GET?: ServerRouteMethodRecordValue<TParentRoute, TFullPath, TMiddlewares>\n  POST?: ServerRouteMethodRecordValue<TParentRoute, TFullPath, TMiddlewares>\n  PUT?: ServerRouteMethodRecordValue<TParentRoute, TFullPath, TMiddlewares>\n  PATCH?: ServerRouteMethodRecordValue<TParentRoute, TFullPath, TMiddlewares>\n  DELETE?: ServerRouteMethodRecordValue<TParentRoute, TFullPath, TMiddlewares>\n  OPTIONS?: ServerRouteMethodRecordValue<TParentRoute, TFullPath, TMiddlewares>\n  HEAD?: ServerRouteMethodRecordValue<TParentRoute, TFullPath, TMiddlewares>\n}\n\nexport type ServerRouteMethodRecordValue<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n> =\n  | ServerRouteMethodHandlerFn<\n      TParentRoute,\n      TFullPath,\n      TMiddlewares,\n      undefined,\n      any\n    >\n  | AnyRouteMethodsBuilder\n\nexport type ServerRouteVerb = (typeof ServerRouteVerbs)[number]\n\nexport const ServerRouteVerbs = [\n  'GET',\n  'POST',\n  'PUT',\n  'PATCH',\n  'DELETE',\n  'OPTIONS',\n  'HEAD',\n] as const\n\nexport type ServerRouteMethodHandlerFn<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n  TMethodMiddlewares,\n  TResponse,\n> = (\n  ctx: ServerRouteMethodHandlerCtx<\n    TParentRoute,\n    TFullPath,\n    TMiddlewares,\n    TMethodMiddlewares\n  >,\n) => TResponse | Promise<TResponse>\n\nexport interface ServerRouteMethodHandlerCtx<\n  in out TParentRoute extends AnyServerRouteWithTypes,\n  in out TFullPath extends string,\n  in out TMiddlewares,\n  in out TMethodMiddlewares,\n> {\n  context: Expand<\n    AssignAllMethodContext<TParentRoute, TMiddlewares, TMethodMiddlewares>\n  >\n  request: Request\n  params: Expand<ResolveParams<TFullPath>>\n  pathname: TFullPath\n}\n\nexport type MergeMethodMiddlewares<TMiddlewares, TMethodMiddlewares> =\n  TMiddlewares extends ReadonlyArray<any>\n    ? TMethodMiddlewares extends ReadonlyArray<any>\n      ? readonly [...TMiddlewares, ...TMethodMiddlewares]\n      : TMiddlewares\n    : TMethodMiddlewares\n\nexport type AssignAllMethodContext<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TMiddlewares,\n  TMethodMiddlewares,\n> = ResolveAllServerContext<\n  TParentRoute,\n  MergeMethodMiddlewares<TMiddlewares, TMethodMiddlewares>\n>\n\nexport type AnyRouteMethodsBuilder = ServerRouteMethodBuilderWithTypes<\n  any,\n  any,\n  any,\n  any,\n  any\n>\n\nexport interface ServerRouteMethodBuilder<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n> extends ServerRouteMethodBuilderWithTypes<\n      TParentRoute,\n      TFullPath,\n      TMiddlewares,\n      undefined,\n      undefined\n    >,\n    ServerRouteMethodBuilderMiddleware<TParentRoute, TFullPath, TMiddlewares>,\n    ServerRouteMethodBuilderHandler<\n      TParentRoute,\n      TFullPath,\n      TMiddlewares,\n      undefined\n    > {}\n\nexport interface ServerRouteMethodBuilderWithTypes<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n  TMethodMiddlewares,\n  TResponse,\n> {\n  _options: ServerRouteMethodBuilderOptions<\n    TParentRoute,\n    TFullPath,\n    TMiddlewares,\n    TMethodMiddlewares,\n    TResponse\n  >\n  _types: ServerRouteMethodBuilderTypes<\n    TFullPath,\n    TMiddlewares,\n    TMethodMiddlewares,\n    TResponse\n  >\n}\n\nexport interface ServerRouteMethodBuilderTypes<\n  in out TFullPath extends string,\n  in out TMiddlewares,\n  in out TMethodMiddlewares,\n  in out TResponse,\n> {\n  middlewares: TMiddlewares\n  methodMiddleware: TMethodMiddlewares\n  fullPath: TFullPath\n  response: TResponse\n}\n\nexport interface ServerRouteMethodBuilderMiddleware<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n> {\n  middleware: <const TNewMethodMiddlewares>(\n    middleware: Constrain<\n      TNewMethodMiddlewares,\n      ReadonlyArray<AnyRequestMiddleware>\n    >,\n  ) => ServerRouteMethodBuilderAfterMiddleware<\n    TParentRoute,\n    TFullPath,\n    TMiddlewares,\n    TNewMethodMiddlewares\n  >\n}\n\nexport interface ServerRouteMethodBuilderAfterMiddleware<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n  TMethodMiddlewares,\n> extends ServerRouteMethodBuilderWithTypes<\n      TParentRoute,\n      TFullPath,\n      TMiddlewares,\n      TMethodMiddlewares,\n      undefined\n    >,\n    ServerRouteMethodBuilderHandler<\n      TParentRoute,\n      TFullPath,\n      TMiddlewares,\n      TMethodMiddlewares\n    > {}\n\nexport interface ServerRouteMethodBuilderHandler<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n  TMethodMiddlewares,\n> {\n  handler: <TResponse>(\n    handler: ServerRouteMethodHandlerFn<\n      TParentRoute,\n      TFullPath,\n      TMiddlewares,\n      TMethodMiddlewares,\n      TResponse\n    >,\n  ) => ServerRouteMethodBuilderAfterHandler<\n    TParentRoute,\n    TFullPath,\n    TMiddlewares,\n    TMethodMiddlewares,\n    TResponse\n  >\n}\n\nexport interface ServerRouteMethodBuilderAfterHandler<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n  TMethodMiddlewares,\n  TResponse,\n> extends ServerRouteMethodBuilderWithTypes<\n    TParentRoute,\n    TFullPath,\n    TMiddlewares,\n    TMethodMiddlewares,\n    TResponse\n  > {\n  opts: ServerRouteMethod<\n    TParentRoute,\n    TFullPath,\n    TMiddlewares,\n    TMethodMiddlewares\n  >\n}\n\nexport interface ServerRouteMethod<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TFullPath extends string,\n  TMiddlewares,\n  TMethodMiddlewares,\n> {\n  middleware?: Constrain<TMiddlewares, Array<AnyRequestMiddleware>>\n  handler?: ServerRouteMethodHandlerFn<\n    TParentRoute,\n    TFullPath,\n    TMiddlewares,\n    TMethodMiddlewares,\n    undefined\n  >\n}\n\nexport interface ServerRouteAfterMethods<\n  TParentRoute extends AnyServerRouteWithTypes,\n  TId extends RouteConstraints['TId'],\n  TPath extends RouteConstraints['TPath'],\n  TFullPath extends RouteConstraints['TFullPath'],\n  TMiddlewares,\n  TMethods,\n  TChildren,\n> extends ServerRouteWithTypes<\n    TParentRoute,\n    TId,\n    TPath,\n    TFullPath,\n    TMiddlewares,\n    TMethods,\n    TChildren\n  > {\n  options: ServerRouteOptions<TParentRoute, TId, TPath, TFullPath, TMiddlewares>\n}\n"],"names":["rootRouteId","trimPathLeft","joinPaths"],"mappings":";;;AAcO,SAAS,sBAUd,GAA2E;AACpE,SAAA,kBAEP;AACF;AA4CgB,SAAA,kBAOd,IACA,QAG6D;AACvD,QAAA,UAAU,UAAU,CAAC;AAE3B,QAAM,QAAqE;AAAA,IACzE,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,IAAI;AAAA,IACJ;AAAA,IAOA,aAAa;AAAA,IACb,QAAQ,CAAC;AAAA;AAAA,IAST,YAAY,CAAC,gBACX,kBAAkB,QAAW;AAAA,MAC3B,GAAG;AAAA,MACH,YAAY;AAAA,IAAA,CACb;AAAA,IACH,SAAS,CAAC,wBAAwB;AAChC,YAAM,WAAW,MAAM;AACjB,YAAA,OAAO,wBAAwB,YAAY;AACtC,iBAAA,oBAAoB,qBAAqB;AAAA,QAAA;AAG3C,eAAA;AAAA,MAAA,GACN;AAEH,aAAO,kBAAkB,QAAW;AAAA,QAClC,GAAG;AAAA,QACH;AAAA,MAAA,CACD;AAAA,IACH;AAAA,IACA,QAAQ,CAAC,SACP,kBAAkB,QAAW;AAAA,MAC3B,GAAG;AAAA,MACH,GAAG;AAAA,IAAA,CACJ;AAAA,IACH,MAAM,CAAC,SAA0C;;AAC/C,cAAQ,gBAAgB,KAAK;AAE7B,YAAM,SAAS,CAAC,QAAQ,QAAQ,CAAC,QAAQ;AAEnC,YAAA,eAAc,aAAQ,mBAAR;AAEpB,UAAI,QAAQ;AACV,cAAM,OAAOA,WAAA;AAAA,MAAA,WACJ,CAAE,MAAM,aAAqB;AACtC,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MAAA;AAGE,UAAA,OAA2B,SAASA,WAAA,cAAc,QAAQ;AAG1D,UAAA,QAAQ,SAAS,KAAK;AACxB,eAAOC,wBAAa,IAAI;AAAA,MAAA;AAGpB,YAAA,WAAW,QAAQ,MAAM;AAG3B,UAAA,KAAK,SACLD,WAAA,cACAE,qBAAU;AAAA,QACR,MAAM,YAAY,OAAOF,WAAAA,cAAc,KAAK,MAAM,YAAY;AAAA,QAC9D;AAAA,MAAA,CACD;AAEL,UAAI,SAASA,WAAAA,aAAa;AACjB,eAAA;AAAA,MAAA;AAGT,UAAI,OAAOA,WAAAA,aAAa;AACtB,aAAKE,WAAU,UAAA,CAAC,KAAK,EAAE,CAAC;AAAA,MAAA;AAGpB,YAAA,WACJ,OAAOF,WAAA,cAAc,MAAME,WAAAA,UAAU,CAAC,MAAM,YAAY,UAAU,IAAI,CAAC;AAEzE,YAAM,OAAO;AACb,YAAM,KAAK;AACX,YAAM,WAAW;AACjB,YAAM,KAAK;AACX,YAAM,SAAS;AAAA,IACjB;AAAA,IAEA,kBAAkB,CAAC,aAAa;AAC1B,UAAA,MAAM,QAAQ,QAAQ,GAAG;AAC3B,cAAM,WAAW;AAAA,MAAA;AAGnB,UAAI,OAAO,aAAa,YAAY,aAAa,MAAM;AAC/C,cAAA,WAAW,OAAO,OAAO,QAAQ;AAAA,MAAA;AAGlC,aAAA;AAAA,IACT;AAAA,IAEA,eAAe,MAAkB;AAAA,EACnC;AAEO,SAAA;AACT;AAIO,MAAM,wBAAwB;AAsBrC,MAAM,sBAAsB,CAK1B,WAOoE;AAC7D,SAAA;AAAA,IACL,UAAW,UAAU,CAAC;AAAA,IACtB,QAAQ,CAAC;AAAA,IACT,YAAY,CAAC,gBACX,oBAAoB;AAAA,MAClB,GAAG;AAAA,MACH;AAAA,IAAA,CACD;AAAA,IACH,SAAS,CAAC,YACR,oBAAoB;AAAA,MAClB,GAAG;AAAA,MACH;AAAA,IACD,CAAA;AAAA,EACL;AACF;;;;"}