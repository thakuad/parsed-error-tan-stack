{"version":3,"file":"plugin.js","sources":["../../../src/resolve-virtual-entries-plugin/plugin.ts"],"sourcesContent":["import path from 'node:path'\nimport * as vite from 'vite'\nimport type {\n  TanStackStartOutputConfig,\n  TanStackStartVitePluginCoreOptions,\n} from '../plugin'\n\nexport function resolveVirtualEntriesPlugin(\n  opts: TanStackStartVitePluginCoreOptions,\n  startConfig: TanStackStartOutputConfig,\n): vite.Plugin {\n  let resolvedConfig: vite.ResolvedConfig\n\n  const modules = new Set<string>([\n    '/~start/server-entry',\n    '/~start/default-server-entry',\n    '/~start/default-client-entry',\n  ])\n\n  return {\n    name: 'tanstack-start-core:resolve-virtual-entries',\n    configResolved(config) {\n      resolvedConfig = config\n    },\n    resolveId: {\n      filter: {\n        id: new RegExp([...modules].join('|')),\n      },\n      handler(id) {\n        if (modules.has(id)) {\n          return `${id}.tsx`\n        }\n\n        return undefined\n      },\n    },\n    load: {\n      filter: {\n        id: new RegExp([...modules].map((m) => `${m}.tsx`).join('|')),\n      },\n      handler(id) {\n        const routerFilepath = vite.normalizePath(\n          path.resolve(\n            startConfig.root,\n            startConfig.tsr.srcDirectory,\n            'router',\n          ),\n        )\n\n        if (id === '/~start/server-entry.tsx') {\n          const ssrEntryFilepath = startConfig.serverEntryPath.startsWith(\n            '/~start/default-server-entry',\n          )\n            ? startConfig.serverEntryPath\n            : vite.normalizePath(\n                path.resolve(resolvedConfig.root, startConfig.serverEntryPath),\n              )\n\n          return opts.getVirtualServerRootHandler({\n            routerFilepath,\n            serverEntryFilepath: ssrEntryFilepath,\n          })\n        }\n\n        if (id === '/~start/default-client-entry.tsx') {\n          return opts.getVirtualClientEntry({ routerFilepath })\n        }\n\n        if (id === '/~start/default-server-entry.tsx') {\n          return opts.getVirtualServerEntry({ routerFilepath })\n        }\n\n        return undefined\n      },\n    },\n  }\n}\n"],"names":[],"mappings":";;AAOgB,SAAA,4BACd,MACA,aACa;AACT,MAAA;AAEE,QAAA,8BAAc,IAAY;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAEM,SAAA;AAAA,IACL,MAAM;AAAA,IACN,eAAe,QAAQ;AACJ,uBAAA;AAAA,IACnB;AAAA,IACA,WAAW;AAAA,MACT,QAAQ;AAAA,QACN,IAAI,IAAI,OAAO,CAAC,GAAG,OAAO,EAAE,KAAK,GAAG,CAAC;AAAA,MACvC;AAAA,MACA,QAAQ,IAAI;AACN,YAAA,QAAQ,IAAI,EAAE,GAAG;AACnB,iBAAO,GAAG,EAAE;AAAA,QAAA;AAGP,eAAA;AAAA,MAAA;AAAA,IAEX;AAAA,IACA,MAAM;AAAA,MACJ,QAAQ;AAAA,QACN,IAAI,IAAI,OAAO,CAAC,GAAG,OAAO,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC;AAAA,MAC9D;AAAA,MACA,QAAQ,IAAI;AACV,cAAM,iBAAiB,KAAK;AAAA,UAC1B,KAAK;AAAA,YACH,YAAY;AAAA,YACZ,YAAY,IAAI;AAAA,YAChB;AAAA,UAAA;AAAA,QAEJ;AAEA,YAAI,OAAO,4BAA4B;AAC/B,gBAAA,mBAAmB,YAAY,gBAAgB;AAAA,YACnD;AAAA,UAAA,IAEE,YAAY,kBACZ,KAAK;AAAA,YACH,KAAK,QAAQ,eAAe,MAAM,YAAY,eAAe;AAAA,UAC/D;AAEJ,iBAAO,KAAK,4BAA4B;AAAA,YACtC;AAAA,YACA,qBAAqB;AAAA,UAAA,CACtB;AAAA,QAAA;AAGH,YAAI,OAAO,oCAAoC;AAC7C,iBAAO,KAAK,sBAAsB,EAAE,gBAAgB;AAAA,QAAA;AAGtD,YAAI,OAAO,oCAAoC;AAC7C,iBAAO,KAAK,sBAAsB,EAAE,gBAAgB;AAAA,QAAA;AAG/C,eAAA;AAAA,MAAA;AAAA,IACT;AAAA,EAEJ;AACF;"}