{"version":3,"file":"prerender.cjs","sources":["../../../src/nitro-plugin/prerender.ts"],"sourcesContent":["import { promises as fsp } from 'node:fs'\nimport { pathToFileURL } from 'node:url'\nimport os from 'node:os'\nimport path from 'node:path'\nimport { getRollupConfig } from 'nitropack/rollup'\nimport { build as buildNitro, createNitro } from 'nitropack'\nimport { joinURL, withBase, withoutBase } from 'ufo'\nimport { VITE_ENVIRONMENT_NAMES } from '../constants'\nimport { createLogger } from '../utils'\nimport { Queue } from './queue'\nimport type { ViteBuilder } from 'vite'\nimport type { $Fetch, Nitro } from 'nitropack'\nimport type { TanStackStartOutputConfig } from '../plugin'\nimport type { Page } from '../schema'\n\nexport async function prerender({\n  options,\n  nitro,\n  builder,\n}: {\n  options: TanStackStartOutputConfig\n  nitro: Nitro\n  builder: ViteBuilder\n}) {\n  const logger = createLogger('prerender')\n  logger.info('Prerendering pages...')\n\n  // If prerender is enabled but no pages are provided, default to prerendering the root page\n  if (options.prerender?.enabled && !options.pages.length) {\n    options.pages = [\n      {\n        path: '/',\n      },\n    ]\n  }\n\n  const serverEnv = builder.environments[VITE_ENVIRONMENT_NAMES.server]\n\n  if (!serverEnv) {\n    throw new Error(\n      `Vite's \"${VITE_ENVIRONMENT_NAMES.server}\" environment not found`,\n    )\n  }\n\n  const prerenderOutputDir = path.resolve(\n    options.root,\n    '.tanstack',\n    'start',\n    'build',\n    'prerenderer',\n  )\n\n  const nodeNitro = await createNitro({\n    ...nitro.options._config,\n    preset: 'nitro-prerender',\n    logLevel: 0,\n    output: {\n      dir: prerenderOutputDir,\n      serverDir: path.resolve(prerenderOutputDir, 'server'),\n      publicDir: path.resolve(prerenderOutputDir, 'public'),\n    },\n  })\n\n  const nodeNitroRollupOptions = getRollupConfig(nodeNitro)\n\n  const build = serverEnv.config.build\n\n  build.outDir = prerenderOutputDir\n\n  build.rollupOptions = {\n    ...build.rollupOptions,\n    ...nodeNitroRollupOptions,\n    output: {\n      ...build.rollupOptions.output,\n      ...nodeNitroRollupOptions.output,\n      sourcemap: undefined,\n    },\n  }\n\n  await buildNitro(nodeNitro)\n\n  // Import renderer entry\n  const serverFilename =\n    typeof nodeNitroRollupOptions.output.entryFileNames === 'string'\n      ? nodeNitroRollupOptions.output.entryFileNames\n      : 'index.mjs'\n\n  const serverEntrypoint = pathToFileURL(\n    path.resolve(path.join(nodeNitro.options.output.serverDir, serverFilename)),\n  ).toString()\n\n  const { closePrerenderer, localFetch } = (await import(serverEntrypoint)) as {\n    closePrerenderer: () => void\n    localFetch: $Fetch\n  }\n\n  try {\n    // Crawl all pages\n    const pages = await prerenderPages()\n\n    logger.info(`Prerendered ${pages.length} pages:`)\n    pages.forEach((page) => {\n      logger.info(`- ${page}`)\n    })\n\n    // TODO: Write the prerendered pages to the output directory\n  } catch (error) {\n    logger.error(error)\n  } finally {\n    // Ensure server is always closed\n    // server.process.kill()\n    closePrerenderer()\n  }\n\n  function extractLinks(html: string): Array<string> {\n    const linkRegex = /<a[^>]+href=[\"']([^\"']+)[\"'][^>]*>/g\n    const links: Array<string> = []\n    let match\n\n    while ((match = linkRegex.exec(html)) !== null) {\n      const href = match[1]\n      if (href && (href.startsWith('/') || href.startsWith('./'))) {\n        links.push(href)\n      }\n    }\n\n    return links\n  }\n\n  async function prerenderPages() {\n    const seen = new Set<string>()\n    const retriesByPath = new Map<string, number>()\n    const concurrency = options.prerender?.concurrency ?? os.cpus().length\n    logger.info(`Concurrency: ${concurrency}`)\n    const queue = new Queue({ concurrency })\n\n    options.pages.forEach((page) => addCrawlPageTask(page))\n\n    await queue.start()\n\n    return Array.from(seen)\n\n    function addCrawlPageTask(page: Page) {\n      // Was the page already seen?\n      if (seen.has(page.path)) return\n\n      // Add the page to the seen set\n      seen.add(page.path)\n\n      if (page.fromCrawl) {\n        options.pages.push(page)\n      }\n\n      // If not enabled, skip\n      if (!(page.prerender?.enabled ?? true)) return\n\n      // If there is a filter link, check if the page should be prerendered\n      if (options.prerender?.filter && !options.prerender.filter(page)) return\n\n      // Resolve the merged default and page-specific prerender options\n      const prerenderOptions = {\n        ...options.prerender,\n        ...page.prerender,\n      }\n\n      // Add the task\n      queue.add(async () => {\n        logger.info(`Crawling: ${page.path}`)\n        const retries = retriesByPath.get(page.path) || 0\n        try {\n          // Fetch the route\n          const encodedRoute = encodeURI(page.path)\n\n          const res = await localFetch<Response>(\n            withBase(encodedRoute, nodeNitro.options.baseURL),\n            {\n              headers: { 'x-nitro-prerender': encodedRoute },\n            },\n          )\n\n          if (!res.ok) {\n            throw new Error(`Failed to fetch ${page.path}: ${res.statusText}`, {\n              cause: res,\n            })\n          }\n\n          const cleanPagePath = (\n            prerenderOptions.outputPath || page.path\n          ).split(/[?#]/)[0]!\n\n          // Guess route type and populate fileName\n          const contentType = res.headers.get('content-type') || ''\n          const isImplicitHTML =\n            !cleanPagePath.endsWith('.html') && contentType.includes('html')\n          // &&\n          // !JsonSigRx.test(dataBuff.subarray(0, 32).toString('utf8'))\n          const routeWithIndex = cleanPagePath.endsWith('/')\n            ? cleanPagePath + 'index'\n            : cleanPagePath\n\n          const htmlPath =\n            cleanPagePath.endsWith('/') || prerenderOptions.autoSubfolderIndex\n              ? joinURL(cleanPagePath, 'index.html')\n              : cleanPagePath + '.html'\n\n          const filename = withoutBase(\n            isImplicitHTML ? htmlPath : routeWithIndex,\n            nitro.options.baseURL,\n          )\n\n          const html = await res.text()\n\n          const filepath = path.join(nitro.options.output.publicDir, filename)\n\n          await fsp.mkdir(path.dirname(filepath), {\n            recursive: true,\n          })\n\n          await fsp.writeFile(filepath, html)\n\n          const newPage = await prerenderOptions.onSuccess?.({ page, html })\n\n          if (newPage) {\n            Object.assign(page, newPage)\n          }\n\n          // Find new links\n          if (prerenderOptions.crawlLinks ?? true) {\n            const links = extractLinks(html)\n            for (const link of links) {\n              addCrawlPageTask({ path: link, fromCrawl: true })\n            }\n          }\n        } catch (error) {\n          if (retries < (prerenderOptions.retryCount ?? 0)) {\n            logger.warn(`Encountered error, retrying: ${page.path} in 500ms`)\n            await new Promise((resolve) =>\n              setTimeout(resolve, prerenderOptions.retryDelay),\n            )\n            retriesByPath.set(page.path, retries + 1)\n            addCrawlPageTask(page)\n          } else {\n            throw error\n          }\n        }\n      })\n    }\n  }\n}\n"],"names":["createLogger","VITE_ENVIRONMENT_NAMES","createNitro","getRollupConfig","buildNitro","pathToFileURL","_a","queue","Queue","withBase","joinURL","withoutBase","fsp"],"mappings":"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"}