import path from "node:path";
import { createNitro } from "nitropack";
import { trimPathRight } from "@tanstack/router-core";
import { VIRTUAL_MODULES } from "@tanstack/start-server-core";
import { TanStackServerFnPluginEnv } from "@tanstack/server-functions-plugin";
import * as vite from "vite";
import { createTanStackConfig } from "./schema.js";
import { nitroPlugin } from "./nitro-plugin/plugin.js";
import { startManifestPlugin } from "./start-manifest-plugin/plugin.js";
import { startCompilerPlugin } from "./start-compiler-plugin.js";
import { SSR_ENTRY_FILE, VITE_ENVIRONMENT_NAMES, CLIENT_DIST_DIR } from "./constants.js";
import { tanStackStartRouter } from "./start-router-plugin/plugin.js";
import { loadEnvPlugin } from "./load-env-plugin/plugin.js";
import { devServerPlugin } from "./dev-server-plugin/plugin.js";
import { resolveVirtualEntriesPlugin } from "./resolve-virtual-entries-plugin/plugin.js";
createTanStackConfig();
let ssrBundle;
function TanStackStartVitePluginCore(opts, startConfig) {
  return [
    tanStackStartRouter({
      ...startConfig.tsr,
      target: opts.framework,
      autoCodeSplitting: true
    }),
    resolveVirtualEntriesPlugin(opts, startConfig),
    {
      name: "tanstack-start-core:config-client",
      async config(viteConfig) {
        var _a;
        const viteAppBase = trimPathRight(viteConfig.base || "/");
        globalThis.TSS_APP_BASE = viteAppBase;
        const nitroOutputPublicDir = await (async () => {
          const dummyNitroApp = await createNitro({
            preset: startConfig.target,
            compatibilityDate: "2024-12-01"
          });
          const nitroOutputPublicDir2 = dummyNitroApp.options.output.publicDir;
          await dummyNitroApp.close();
          return nitroOutputPublicDir2;
        })();
        return {
          base: viteAppBase,
          environments: {
            [VITE_ENVIRONMENT_NAMES.client]: {
              consumer: "client",
              build: {
                manifest: true,
                rollupOptions: {
                  input: {
                    main: getClientEntryPath(startConfig)
                  },
                  output: {
                    dir: path.resolve(startConfig.root, CLIENT_DIST_DIR)
                  },
                  // TODO: this should be removed
                  external: ["node:fs", "node:path", "node:os", "node:crypto"]
                }
              }
            },
            [VITE_ENVIRONMENT_NAMES.server]: {
              consumer: "server",
              build: {
                ssr: true,
                // we don't write to the file system as the below 'capture-output' plugin will
                // capture the output and write it to the virtual file system
                write: false,
                copyPublicDir: false,
                rollupOptions: {
                  output: {
                    entryFileNames: SSR_ENTRY_FILE
                  },
                  plugins: [
                    {
                      name: "capture-output",
                      generateBundle(_options, bundle) {
                        ssrBundle = bundle;
                      }
                    }
                  ]
                },
                commonjsOptions: {
                  include: [/node_modules/]
                }
              }
            }
          },
          resolve: {
            noExternal: [
              "@tanstack/start-client",
              "@tanstack/start-client-core",
              "@tanstack/start-server",
              "@tanstack/start-server-core",
              "@tanstack/start-server-functions-fetcher",
              "@tanstack/start-server-functions-client",
              "@tanstack/start-server-functions-server",
              "@tanstack/start-router-manifest",
              "@tanstack/start-config",
              "@tanstack/server-functions-plugin",
              "nitropack",
              "@tanstack/**start**",
              ...Object.values(VIRTUAL_MODULES)
            ]
          },
          optimizeDeps: {
            exclude: [...Object.values(VIRTUAL_MODULES)]
          },
          /* prettier-ignore */
          define: {
            // define is an esbuild function that replaces the any instances of given keys with the given values
            // i.e: __FRAMEWORK_NAME__ can be replaced with JSON.stringify("TanStack Start")
            // This is not the same as injecting environment variables.
            ...defineReplaceEnv("TSS_SERVER_FN_BASE", startConfig.serverFns.base),
            ...defineReplaceEnv("TSS_OUTPUT_PUBLIC_DIR", nitroOutputPublicDir),
            ...defineReplaceEnv("TSS_APP_BASE", viteAppBase),
            ...defineReplaceEnv("TSS_SPA_MODE", ((_a = startConfig.spa) == null ? void 0 : _a.enabled) ? "true" : "false")
          }
        };
      }
    },
    // N.B. TanStackStartCompilerPlugin must be before the TanStackServerFnPluginEnv
    startCompilerPlugin(opts.framework, {
      client: { envName: VITE_ENVIRONMENT_NAMES.client },
      server: { envName: VITE_ENVIRONMENT_NAMES.server }
    }),
    TanStackServerFnPluginEnv({
      // This is the ID that will be available to look up and import
      // our server function manifest and resolve its module
      manifestVirtualImportId: VIRTUAL_MODULES.serverFnManifest,
      client: {
        getRuntimeCode: () => `import { createClientRpc } from '@tanstack/${opts.framework}-start/server-functions-client'`,
        replacer: (d) => `createClientRpc('${d.functionId}', '${startConfig.serverFns.base}')`,
        envName: VITE_ENVIRONMENT_NAMES.client
      },
      server: {
        getRuntimeCode: () => `import { createServerRpc } from '@tanstack/${opts.framework}-start/server-functions-server'`,
        replacer: (d) => `createServerRpc('${d.functionId}', '${startConfig.serverFns.base}', ${d.fn})`,
        envName: VITE_ENVIRONMENT_NAMES.server
      }
    }),
    loadEnvPlugin(startConfig),
    startManifestPlugin({ clientEntry: getClientEntryPath(startConfig) }),
    devServerPlugin(),
    nitroPlugin(startConfig, () => ssrBundle),
    {
      name: "tanstack-start:core:capture-client-bundle",
      applyToEnvironment(e) {
        return e.config.consumer === "client";
      },
      enforce: "post",
      generateBundle(_options, bundle) {
        globalThis.TSS_CLIENT_BUNDLE = bundle;
      }
    }
  ];
}
function defineReplaceEnv(key, value) {
  return {
    [`process.env.${key}`]: JSON.stringify(value),
    [`import.meta.env.${key}`]: JSON.stringify(value)
  };
}
const getClientEntryPath = (startConfig) => {
  const entry = startConfig.clientEntryPath.startsWith(
    "/~start/default-client-entry"
  ) ? startConfig.clientEntryPath : vite.normalizePath(
    path.join(
      "/@fs",
      path.resolve(startConfig.root, startConfig.clientEntryPath)
    )
  );
  return entry;
};
export {
  TanStackStartVitePluginCore
};
//# sourceMappingURL=plugin.js.map
