{"version":3,"file":"schema.js","sources":["../../src/schema.ts"],"sourcesContent":["import path from 'node:path'\nimport { existsSync } from 'node:fs'\nimport { z } from 'zod'\nimport { configSchema, getConfig } from '@tanstack/router-generator'\nimport type { NitroConfig } from 'nitropack'\n\nconst tsrConfig = configSchema\n  .omit({ autoCodeSplitting: true })\n  .partial()\n  .extend({\n    srcDirectory: z.string().optional().default('src'),\n  })\n\nexport function createTanStackConfig<\n  TFrameworkPlugin extends Record<string, unknown>,\n>(frameworkPlugin?: TFrameworkPlugin) {\n  const schema = createTanStackStartOptionsSchema(frameworkPlugin)\n\n  return {\n    schema,\n    parse: (opts?: z.input<typeof schema>) => {\n      const options = schema.parse(opts)\n\n      const srcDirectory = options.tsr.srcDirectory\n\n      const routesDirectory =\n        options.tsr.routesDirectory ?? path.join(srcDirectory, 'routes')\n\n      const generatedRouteTree =\n        options.tsr.generatedRouteTree ??\n        path.join(srcDirectory, 'routeTree.gen.ts')\n\n      const clientEntryPath = (() => {\n        if (options.client.entry) {\n          return path.join(srcDirectory, options.client.entry)\n        }\n\n        if (existsSync(path.join(srcDirectory, 'client.tsx'))) {\n          return path.join(srcDirectory, 'client.tsx')\n        }\n\n        return '/~start/default-client-entry'\n      })()\n\n      const serverEntryPath = (() => {\n        if (options.server.entry) {\n          return path.join(srcDirectory, options.server.entry)\n        }\n\n        if (existsSync(path.join(srcDirectory, 'server.tsx'))) {\n          return path.join(srcDirectory, 'server.tsx')\n        }\n\n        if (existsSync(path.join(srcDirectory, 'server.ts'))) {\n          return path.join(srcDirectory, 'server.ts')\n        }\n\n        if (existsSync(path.join(srcDirectory, 'server.js'))) {\n          return path.join(srcDirectory, 'server.js')\n        }\n\n        return '/~start/default-server-entry'\n      })()\n\n      return {\n        ...options,\n        tsr: {\n          ...options.tsr,\n          ...getConfig({\n            ...options.tsr,\n            routesDirectory,\n            generatedRouteTree,\n          }),\n        },\n        clientEntryPath,\n        serverEntryPath,\n      }\n    },\n  }\n}\n\nexport function createTanStackStartOptionsSchema(\n  frameworkPlugin: Record<string, unknown> = {},\n) {\n  return z\n    .object({\n      root: z.string().optional().default(process.cwd()),\n      target: z.custom<NitroConfig['preset']>().optional(),\n      ...frameworkPlugin,\n      tsr: tsrConfig.optional().default({}),\n      client: z\n        .object({\n          entry: z.string().optional(),\n          base: z.string().optional().default('/_build'),\n        })\n        .optional()\n        .default({}),\n      server: z\n        .object({\n          entry: z.string().optional(),\n        })\n        .optional()\n        .default({}),\n      serverFns: z\n        .object({\n          base: z.string().optional().default('/_serverFn'),\n        })\n        .optional()\n        .default({}),\n      public: z\n        .object({\n          dir: z.string().optional().default('public'),\n          base: z.string().optional().default('/'),\n        })\n        .optional()\n        .default({}),\n      pages: z.array(pageSchema).optional().default([]),\n      sitemap: z\n        .object({\n          enabled: z.boolean().optional().default(true),\n          host: z.string().optional(),\n          outputPath: z.string().optional().default('sitemap.xml'),\n        })\n        .optional(),\n      prerender: z\n        .object({\n          enabled: z.boolean().optional(),\n          concurrency: z.number().optional(),\n          filter: z.function().args(pageSchema).returns(z.any()).optional(),\n          failOnError: z.boolean().optional(),\n        })\n        .and(pagePrerenderOptionsSchema.optional())\n        .optional(),\n      spa: spaSchema.optional(),\n    })\n    .optional()\n    .default({})\n}\n\nconst pageSitemapOptionsSchema = z.object({\n  exclude: z.boolean().optional(),\n  priority: z.number().min(0).max(1).optional(),\n  changefreq: z\n    .enum(['always', 'hourly', 'daily', 'weekly', 'monthly', 'yearly', 'never'])\n    .optional(),\n  lastmod: z.union([z.string(), z.date()]).optional(),\n  alternateRefs: z\n    .array(\n      z.object({\n        href: z.string(),\n        hreflang: z.string(),\n      }),\n    )\n    .optional(),\n  images: z\n    .array(\n      z.object({\n        loc: z.string(),\n        caption: z.string().optional(),\n        title: z.string().optional(),\n      }),\n    )\n    .optional(),\n  news: z\n    .object({\n      publication: z.object({\n        name: z.string(),\n        language: z.string(),\n      }),\n      publicationDate: z.union([z.string(), z.date()]),\n      title: z.string(),\n    })\n    .optional(),\n})\n\nconst pageBaseSchema = z.object({\n  path: z.string(),\n  sitemap: pageSitemapOptionsSchema.optional(),\n  fromCrawl: z.boolean().optional(),\n})\n\nconst pagePrerenderOptionsSchema = z.object({\n  enabled: z.boolean().optional(),\n  outputPath: z.string().optional(),\n  autoSubfolderIndex: z.boolean().optional(),\n  crawlLinks: z.boolean().optional(),\n  retryCount: z.number().optional(),\n  retryDelay: z.number().optional(),\n  onSuccess: z\n    .function()\n    .args(\n      z.object({\n        page: pageBaseSchema,\n        html: z.string(),\n      }),\n    )\n    .returns(z.any())\n    .optional(),\n})\n\nconst spaSchema = z.object({\n  enabled: z.boolean().optional().default(true),\n  maskPath: z.string().optional().default('/'),\n  prerender: pagePrerenderOptionsSchema\n    .optional()\n    .default({})\n    .transform((opts) => ({\n      outputPath: opts.outputPath ?? '/_shell',\n      crawlLinks: false,\n      retryCount: 0,\n      ...opts,\n      enabled: true,\n    })),\n})\n\nexport const pageSchema = pageBaseSchema.extend({\n  prerender: pagePrerenderOptionsSchema.optional(),\n})\n\nexport type Page = z.infer<typeof pageSchema>\n"],"names":[],"mappings":"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"}