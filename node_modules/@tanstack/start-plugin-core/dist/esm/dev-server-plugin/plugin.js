import { createEvent, sendWebResponse, getHeader } from "h3";
import { isRunnableDevEnvironment } from "vite";
import { VITE_ENVIRONMENT_NAMES } from "../constants.js";
import { extractHtmlScripts } from "./extract-html-scripts.js";
function devServerPlugin() {
  let isTest = false;
  return {
    name: "start-dev-ssr-plugin",
    config(userConfig, { mode }) {
      isTest = isTest ? isTest : mode === "test";
    },
    configureServer(viteDevServer) {
      if (isTest) {
        return;
      }
      globalThis.TSS_INJECTED_HEAD_SCRIPTS = void 0;
      return () => {
        remove_html_middlewares(viteDevServer.middlewares);
        viteDevServer.middlewares.use(async (req, res, next) => {
          var _a;
          if (req.originalUrl) {
            req.url = req.originalUrl;
          }
          const event = createEvent(req, res);
          const serverEnv = viteDevServer.environments[VITE_ENVIRONMENT_NAMES.server];
          try {
            if (!serverEnv) {
              throw new Error(
                `Server environment ${VITE_ENVIRONMENT_NAMES.server} not found`
              );
            }
            if (globalThis.TSS_INJECTED_HEAD_SCRIPTS === void 0) {
              const templateHtml = `<html><head></head><body></body></html>`;
              const transformedHtml = await viteDevServer.transformIndexHtml(
                req.url || "/",
                templateHtml
              );
              const scripts = extractHtmlScripts(transformedHtml);
              globalThis.TSS_INJECTED_HEAD_SCRIPTS = scripts.map((script) => script.content ?? "").join(";");
            }
            if (!isRunnableDevEnvironment(serverEnv)) {
              return next();
            }
            const serverEntry = await serverEnv.runner.import(
              "/~start/server-entry"
            );
            const response = await serverEntry["default"](event);
            return sendWebResponse(event, response);
          } catch (e) {
            console.error(e);
            viteDevServer.ssrFixStacktrace(e);
            if ((_a = getHeader(event, "content-type")) == null ? void 0 : _a.includes("application/json")) {
              return sendWebResponse(
                event,
                new Response(
                  JSON.stringify(
                    {
                      status: 500,
                      error: "Internal Server Error",
                      message: "An unexpected error occurred. Please try again later.",
                      timestamp: (/* @__PURE__ */ new Date()).toISOString()
                    },
                    null,
                    2
                  ),
                  {
                    status: 500,
                    headers: {
                      "Content-Type": "application/json"
                    }
                  }
                )
              );
            }
            return sendWebResponse(
              event,
              new Response(
                `
              <!DOCTYPE html>
              <html lang="en">
                <head>
                  <meta charset="UTF-8" />
                  <title>Error</title>
                  <script type="module">
                    import { ErrorOverlay } from '/@vite/client'
                    document.body.appendChild(new ErrorOverlay(${JSON.stringify(
                  prepareError(req, e)
                ).replace(/</g, "\\u003c")}))
                  <\/script>
                </head>
                <body>
                </body>
              </html>
            `,
                {
                  status: 500,
                  headers: {
                    "Content-Type": "text/html"
                  }
                }
              )
            );
          }
        });
      };
    }
  };
}
function remove_html_middlewares(server) {
  const html_middlewares = [
    "viteIndexHtmlMiddleware",
    "vite404Middleware",
    "viteSpaFallbackMiddleware"
  ];
  for (let i = server.stack.length - 1; i > 0; i--) {
    if (html_middlewares.includes(
      // @ts-expect-error
      server.stack[i].handle.name
    )) {
      server.stack.splice(i, 1);
    }
  }
}
function prepareError(req, error) {
  const e = error;
  return {
    message: `An error occured while server rendering ${req.url}:

	${typeof e === "string" ? e : e.message} `,
    stack: typeof e === "string" ? "" : e.stack
  };
}
export {
  devServerPlugin
};
//# sourceMappingURL=plugin.js.map
