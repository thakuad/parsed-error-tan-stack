{"version":3,"file":"server-routes-plugin.cjs","sources":["../../../../src/start-router-plugin/generator-plugins/server-routes-plugin.ts"],"sourcesContent":["import {\n  checkRouteFullPathUniqueness,\n  ensureStringArgument,\n  hasChildWithExport,\n} from '@tanstack/router-generator'\n\nimport type {\n  GeneratorPluginWithTransform,\n  ImportDeclaration,\n  TransformImportsConfig,\n} from '@tanstack/router-generator'\n\nconst EXPORT_NAME = 'ServerRoute'\nexport function serverRoutesPlugin(): GeneratorPluginWithTransform {\n  return {\n    name: 'server-routes-plugin',\n    transformPlugin: {\n      name: 'server-routes-transform',\n      exportName: EXPORT_NAME,\n      imports: (ctx) => {\n        const targetModule = `@tanstack/${ctx.target}-start/server`\n        const imports: TransformImportsConfig = {}\n        if (ctx.verboseFileRoutes === false) {\n          imports.banned = [\n            {\n              source: targetModule,\n              specifiers: [{ imported: 'createServerFileRoute' }],\n            },\n          ]\n        } else {\n          imports.required = [\n            {\n              source: targetModule,\n              specifiers: [{ imported: 'createServerFileRoute' }],\n            },\n          ]\n        }\n        return imports\n      },\n      onExportFound: ({ ctx, decl }) => {\n        let appliedChanges = false\n        if (decl.init?.type === 'CallExpression') {\n          let call = decl.init\n          let callee = call.callee\n\n          while (\n            callee.type === 'MemberExpression' &&\n            callee.object.type === 'CallExpression'\n          ) {\n            call = callee.object\n            callee = call.callee\n          }\n          if (\n            call.callee.type === 'Identifier' &&\n            call.callee.name === 'createServerFileRoute'\n          ) {\n            if (!ctx.verboseFileRoutes) {\n              if (call.arguments.length) {\n                call.arguments = []\n                appliedChanges = true\n              }\n            } else {\n              appliedChanges = ensureStringArgument(\n                call,\n                ctx.routeId,\n                ctx.preferredQuote,\n              )\n            }\n          } else {\n            throw new Error(\n              `Expected \"createServerFileRoute\" call, but got \"${call.callee.type}\"`,\n            )\n          }\n        }\n        return appliedChanges\n      },\n    },\n    moduleAugmentation: ({ generator }) => ({\n      module: `@tanstack/${generator.config.target}-start/server`,\n      interfaceName: 'ServerFileRoutesByPath',\n    }),\n    onRouteTreesChanged: ({ routeTrees, generator }) => {\n      const tree = routeTrees.find((tree) => tree.exportName === EXPORT_NAME)\n      if (tree) {\n        checkRouteFullPathUniqueness(tree.sortedRouteNodes, generator.config)\n      }\n    },\n    imports: (ctx) => {\n      const imports: Array<ImportDeclaration> = []\n\n      const targetModule = `@tanstack/${ctx.generator.config.target}-start/server`\n      if (ctx.generator.config.verboseFileRoutes === false) {\n        imports.push({\n          specifiers: [\n            { imported: 'CreateServerFileRoute' },\n            { imported: 'ServerFileRoutesByPath' },\n          ],\n          source: targetModule,\n          importKind: 'type',\n        })\n      }\n      // don't add the import if there are no server routes defined\n      const hasMatchingRouteFiles = ctx.acc.routeNodes.length > 0\n      if (hasMatchingRouteFiles) {\n        // needs a virtual root route\n        if (!ctx.rootRouteNode.exports?.includes(EXPORT_NAME)) {\n          imports.push({\n            specifiers: [{ imported: 'createServerRootRoute' }],\n            source: targetModule,\n          })\n        }\n      }\n      return imports\n    },\n    routeModuleAugmentation: ({ routeNode }) => {\n      // server routes don't support lazy routes\n      if (routeNode._fsRouteType === 'lazy') {\n        return undefined\n      }\n      return `const createServerFileRoute: CreateServerFileRoute<\n          ServerFileRoutesByPath['${routeNode.routePath}']['parentRoute'],\n          ServerFileRoutesByPath['${routeNode.routePath}']['id'],\n          ServerFileRoutesByPath['${routeNode.routePath}']['path'],\n          ServerFileRoutesByPath['${routeNode.routePath}']['fullPath'],\n          ${hasChildWithExport(routeNode, 'ServerRoute') ? `${routeNode.variableName}ServerRouteChildren` : 'unknown'}\n        >`\n    },\n    createRootRouteCode: () => `createServerRootRoute()`,\n    createVirtualRouteCode: ({ node }) =>\n      `createServerFileRoute('${node.routePath}')`,\n    config: ({ sortedRouteNodes }) => {\n      const hasMatchingRouteFiles = sortedRouteNodes.length > 0\n      return {\n        virtualRootRoute: hasMatchingRouteFiles,\n      }\n    },\n  }\n}\n"],"names":["ensureStringArgument","tree","checkRouteFullPathUniqueness","hasChildWithExport"],"mappings":"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"}