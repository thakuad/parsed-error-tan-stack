import { writeFileSync } from "node:fs";
import path from "node:path";
import { create } from "xmlbuilder2";
import { createLogger } from "../utils.js";
function buildSitemapJson(pages, host) {
  const slash = checkSlash(host);
  const urls = pages.filter((page) => {
    var _a;
    return ((_a = page.sitemap) == null ? void 0 : _a.exclude) !== true;
  }).map((page) => {
    var _a, _b, _c, _d, _e, _f;
    return {
      loc: `${host}${slash}${page.path.replace(/^\/+/g, "")}`,
      lastmod: ((_a = page.sitemap) == null ? void 0 : _a.lastmod) ? new Date(page.sitemap.lastmod).toISOString().split("T")[0] : (/* @__PURE__ */ new Date()).toISOString().split("T")[0],
      priority: (_b = page.sitemap) == null ? void 0 : _b.priority,
      changefreq: (_c = page.sitemap) == null ? void 0 : _c.changefreq,
      alternateRefs: (_d = page.sitemap) == null ? void 0 : _d.alternateRefs,
      images: (_e = page.sitemap) == null ? void 0 : _e.images,
      news: (_f = page.sitemap) == null ? void 0 : _f.news
    };
  });
  return { urls };
}
function jsonToXml(sitemapData) {
  var _a, _b;
  const sitemap = createXml("urlset");
  for (const item of sitemapData.urls) {
    const page = sitemap.ele("url");
    page.ele("loc").txt(item.loc);
    page.ele("lastmod").txt(item.lastmod);
    if (item.priority !== void 0) {
      page.ele("priority").txt(item.priority.toString());
    }
    if (item.changefreq) {
      page.ele("changefreq").txt(item.changefreq);
    }
    if ((_a = item.alternateRefs) == null ? void 0 : _a.length) {
      for (const ref of item.alternateRefs) {
        const alternateRef = page.ele("xhtml:link");
        alternateRef.att("rel", "alternate");
        alternateRef.att("href", ref.href);
        if (ref.hreflang) {
          alternateRef.att("hreflang", ref.hreflang);
        }
      }
    }
    if ((_b = item.images) == null ? void 0 : _b.length) {
      for (const image of item.images) {
        const imageElement = page.ele("image:image");
        imageElement.ele("image:loc").txt(image.loc);
        if (image.title) {
          imageElement.ele("image:title").txt(image.title);
        }
        if (image.caption) {
          imageElement.ele("image:caption").txt(image.caption);
        }
      }
    }
    if (item.news) {
      const newsElement = page.ele("news:news");
      const publication = newsElement.ele("news:publication");
      publication.ele("news:name").txt(item.news.publication.name);
      publication.ele("news:language").txt(item.news.publication.language);
      newsElement.ele("news:publication_date").txt(new Date(item.news.publicationDate).toISOString().split("T")[0]);
      newsElement.ele("news:title").txt(item.news.title);
    }
  }
  return sitemap.end({ prettyPrint: true });
}
function buildSitemap({
  options,
  publicDir
}) {
  const logger = createLogger("sitemap");
  let sitemapOptions = options.sitemap;
  if (!sitemapOptions && options.pages.length) {
    sitemapOptions = { enabled: true, outputPath: "sitemap.xml" };
  }
  if (!(sitemapOptions == null ? void 0 : sitemapOptions.enabled)) {
    throw new Error("Sitemap is not enabled");
  }
  const { host, outputPath } = sitemapOptions;
  if (!host) {
    if (!options.sitemap) {
      logger.info(
        "Hint: Pages found, but no sitemap host has been set. To enable sitemap generation, set the `sitemap.host` option."
      );
      return;
    }
    throw new Error(
      "Sitemap host is not set and required to build the sitemap."
    );
  }
  if (!outputPath) {
    throw new Error("Sitemap output path is not set");
  }
  const { pages } = options;
  if (!pages.length) {
    logger.info("No pages were found to build the sitemap. Skipping...");
    return;
  }
  logger.info("Building Sitemap...");
  const sitemapData = buildSitemapJson(pages, host);
  const xmlOutputPath = path.join(publicDir, outputPath);
  const pagesOutputPath = path.join(publicDir, "pages.json");
  try {
    logger.info(`Writing sitemap XML at ${xmlOutputPath}`);
    writeFileSync(xmlOutputPath, jsonToXml(sitemapData));
    logger.info(`Writing pages data at ${pagesOutputPath}`);
    writeFileSync(
      pagesOutputPath,
      JSON.stringify(
        {
          pages,
          host,
          lastBuilt: (/* @__PURE__ */ new Date()).toISOString()
        },
        null,
        2
      )
    );
  } catch (e) {
    logger.error(`Unable to write sitemap files`, e);
  }
}
function createXml(elementName) {
  return create({ version: "1.0", encoding: "UTF-8" }).ele(elementName, {
    xmlns: "https://www.sitemaps.org/schemas/sitemap/0.9"
  }).com(`This file was automatically generated by TanStack Start.`);
}
function checkSlash(host) {
  const finalChar = host.slice(-1);
  return finalChar === "/" ? "" : "/";
}
export {
  buildSitemap
};
//# sourceMappingURL=build-sitemap.js.map
